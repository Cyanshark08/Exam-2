import java.util.Scanner;
import java.util.ArrayList;
import java.io.*;

public class Exam2 {

	public static void main(String[] args) throws IOException {

		ArrayList<ArrayList<float[]>> shapeLists = new ArrayList<ArrayList<float[]>>();

		initializeFromFile(shapeLists);

		printShapes(shapeLists);

	}

//************************************************************************************************************
//Utility Methods

	public static void printShapes(ArrayList<ArrayList<float[]>> p_ShapeLists) {
		for (byte i = 0; i < 10; i++) {
			for (float[] shape : p_ShapeLists.get(i))
				{
				System.out.printf("\n\n\t%s", shapeIndexToName(i));
					System.out.printf("\n\t*******************************************************");
					printShape(shape, i);
				}
		}
	}

	public static void printShape(final float[] p_ShapeParams, byte p_Index) {
		switch (p_Index) {
		case 0:
			printSphere(p_ShapeParams);
			break;
		case 1:
			printHemisphere(p_ShapeParams);
			break;
		case 2:
			printTetrahedron(p_ShapeParams);
			break;
		case 3:
			printHexahedron(p_ShapeParams);
			break;
		case 4:
			printOctahedron(p_ShapeParams);
			break;
		case 5:
			printDodecahedron(p_ShapeParams);
			break;
		case 6:
			printIcosahedron(p_ShapeParams);
			break;
		case 7:
			printCone(p_ShapeParams);
			break;
		case 8:
			printTorus(p_ShapeParams);
			break;
		case 9:
			printCylinder(p_ShapeParams);
			break;
		default:
			System.out.println("ERROR: Invalid shape index");
		}
	}

	public static void printSphere(final float[] p_Radius) {
		System.out.printf("Radius: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_Radius[0],
				SurfaceAreas.getSphereSurfaceArea(p_Radius[0]), Volumes.getSphereVolume(p_Radius[0]));
	}

	public static void printHemisphere(final float[] p_Radius) {
		System.out.printf("Radius: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_Radius[0],
				SurfaceAreas.getHemisphereSurfaceArea(p_Radius[0]), Volumes.getHemisphereVolume(p_Radius[0]));
	}

	public static void printTetrahedron(final float[] p_EdgeLength) {
		System.out.printf("\n\tEdge Length: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_EdgeLength[0],
				SurfaceAreas.getTetrahedronSurfaceArea(p_EdgeLength[0]));
	}

	// cube
	public static void printHexahedron(final float[] p_EdgeLength) {
		System.out.printf("\n\tEdge Length: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_EdgeLength[0],
				SurfaceAreas.getHexahedronSurfaceArea(p_EdgeLength[0]), Volumes.getHexahedronVolume(p_EdgeLength[0]));
	}

	public static void printOctahedron(final float[] p_EdgeLength) {
		System.out.printf("\n\tEdge Length: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_EdgeLength[0],
				SurfaceAreas.getOctahedronSurfaceArea(p_EdgeLength[0]), Volumes.getOctahedronVolume(p_EdgeLength[0]));
	}

	public static void printDodecahedron(final float[] p_EdgeLength) {
		System.out.printf("\n\tEdge Length: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_EdgeLength[0],
				SurfaceAreas.getDodecahedronSurfaceArea(p_EdgeLength[0]),
				Volumes.getDodecahedronVolume(p_EdgeLength[0]));
	}

	public static void printIcosahedron(final float[] p_EdgeLength) {
		System.out.printf("\n\tEdge Length: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_EdgeLength[0],
				SurfaceAreas.getIcosahedronSurfaceArea(p_EdgeLength[0]), Volumes.getIcosahedronVolume(p_EdgeLength[0]));
	}

	public static void printCone(final float[] p_Cone) {
		System.out.printf("\n\tBase Radius: %.2f \tHeight: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_Cone[0],
				p_Cone[1], SurfaceAreas.getConeSurfaceArea(p_Cone[0], p_Cone[1]),
				Volumes.getConeVolume(p_Cone[0], p_Cone[1]));
	}

	public static void printTorus(final float[] p_Torus) {
		System.out.printf("\n\tMajor Radius: %.2f \tMinor Radius: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_Torus[0],
				p_Torus[1], SurfaceAreas.getTorusSurfaceArea(p_Torus[0], p_Torus[1]),
				Volumes.getTorusVolume(p_Torus[0], p_Torus[1]));
	}

	public static void printCylinder(final float[] p_Cylinders) {
		System.out.printf("\n\tBase Radius: %.2f \tHeight: %.2f \tSurface Area: %.2f \tVolume: %.2f", p_Cylinders[0],
				p_Cylinders[1], SurfaceAreas.getCylinderSurfaceArea(p_Cylinders[0], p_Cylinders[1]),
				Volumes.getCylinderVolume(p_Cylinders[0], p_Cylinders[1]));
	}

	public static void initializeFromFile(ArrayList<ArrayList<float[]>> p_ShapeLists) throws IOException {
		p_ShapeLists.clear();
		p_ShapeLists = new ArrayList<ArrayList<float[]>>();
		
		for(int i = 0; i < 10; i++)
			p_ShapeLists.add(new ArrayList<float[]>());
		
		File file;
		Scanner fileScanner;
		String fileName;

		do 
		{
			fileName = Input.getString("\n\tInput file name to read shapes from:");
			file = new File(fileName);

			if (!file.exists())
				System.out.println("\n\tERROR: INVALID FILE");

		} while (!file.exists());

		fileScanner = new Scanner(file);

		while (fileScanner.hasNext()) {
			
			String[] tokens = fileScanner.nextLine().split(",");
			
			for(String token : tokens)
				System.out.printf("%s", token);
			System.out.printf("\n");

			float[] tempArr = null;
			  
			if(shapeNameToIndex(tokens[0]) == -1) 
			{
				System.out.println("ERROR: Invalid shape detected"); 
				continue; 
			}
			  
			if(tokens.length == 2) 
				tempArr = new float[] {Float.parseFloat(tokens[1])};
			else if(tokens.length == 3) 
				tempArr = new float[] {Float.parseFloat(tokens[1]), Float.parseFloat(tokens[2])};
			  
			p_ShapeLists.get(shapeNameToIndex(tokens[0])).add(tempArr);
			 
		}
		p_ShapeLists.add(null);

		fileScanner.close();
	}

	public static byte shapeNameToIndex(final String p_ShapeName) {
		switch (p_ShapeName.toLowerCase()) {
		case "sphere":
			return 0;
		case "hemisphere":
			return 1;
		case "tetrahedron":
			return 2;
		case "hexahedron":
			return 3;
		case "octahedron":
			return 4;
		case "dodecahedron":
			return 5;
		case "icosahedron":
			return 6;
		case "cone":
			return 7;
		case "torus":
			return 8;
		case "cylinder":
			return 9;
		default:
			return -1;
		}
	}

	public static String shapeIndexToName(byte p_Index) {
		switch (p_Index) {
		case 0:
			return "sphere";
		case 1:
			return "hemisphere";
		case 2:
			return "tetrahedron";
		case 3:
			return "hexahedron";
		case 4:
			return "octahedron";
		case 5:
			return "dodecahedron";
		case 6:
			return "icosahedron";
		case 7:
			return "cone";
		case 8:
			return "torus";
		case 9:
			return "cylinder";
		default:
			return null;
		}
	}

}
